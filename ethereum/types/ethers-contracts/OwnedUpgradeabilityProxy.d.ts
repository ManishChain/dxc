/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface OwnedUpgradeabilityProxyInterface extends Interface {
  functions: {
    implementation: TypedFunctionDescription<{encode([]: []): string}>;

    proxyOwner: TypedFunctionDescription<{encode([]: []): string}>;

    transferProxyOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    upgradeTo: TypedFunctionDescription<{
      encode([implementation]: [string]): string;
    }>;

    upgradeToAndCall: TypedFunctionDescription<{
      encode([implementation, data]: [string, Arrayish]): string;
    }>;
  };

  events: {
    ProxyOwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [null, null]): string[];
    }>;

    Upgraded: TypedEventDescription<{
      encodeTopics([implementation]: [string | null]): string[];
    }>;
  };
}

export class OwnedUpgradeabilityProxy extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): OwnedUpgradeabilityProxy;
  attach(addressOrName: string): OwnedUpgradeabilityProxy;
  deployed(): Promise<OwnedUpgradeabilityProxy>;

  on(event: EventFilter | string, listener: Listener): OwnedUpgradeabilityProxy;
  once(
    event: EventFilter | string,
    listener: Listener
  ): OwnedUpgradeabilityProxy;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): OwnedUpgradeabilityProxy;
  removeAllListeners(eventName: EventFilter | string): OwnedUpgradeabilityProxy;
  removeListener(eventName: any, listener: Listener): OwnedUpgradeabilityProxy;

  interface: OwnedUpgradeabilityProxyInterface;

  functions: {
    implementation(): Promise<string>;

    proxyOwner(): Promise<string>;

    transferProxyOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    upgradeTo(
      implementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      implementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  implementation(): Promise<string>;

  proxyOwner(): Promise<string>;

  transferProxyOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  upgradeTo(
    implementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    implementation: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ProxyOwnershipTransferred(previousOwner: null, newOwner: null): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimate: {
    implementation(): Promise<BigNumber>;

    proxyOwner(): Promise<BigNumber>;

    transferProxyOwnership(newOwner: string): Promise<BigNumber>;

    upgradeTo(implementation: string): Promise<BigNumber>;

    upgradeToAndCall(
      implementation: string,
      data: Arrayish
    ): Promise<BigNumber>;
  };
}
