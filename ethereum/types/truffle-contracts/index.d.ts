/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import BN from "bn.js";

export interface ApproveAndCallFallBackContract
  extends Truffle.Contract<ApproveAndCallFallBackInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ApproveAndCallFallBackInstance>;
}

export interface ContextContract extends Truffle.Contract<ContextInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ContextInstance>;
}

export interface ControlledContract
  extends Truffle.Contract<ControlledInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ControlledInstance>;
}

export interface DTXTokenContract extends Truffle.Contract<DTXTokenInstance> {
  "new"(
    _tokenFactory: string | BN,
    meta?: Truffle.TransactionDetails
  ): Promise<DTXTokenInstance>;
}

export interface DXCContract extends Truffle.Contract<DXCInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DXCInstance>;
}

export interface DXCV2Contract extends Truffle.Contract<DXCV2Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DXCV2Instance>;
}

export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC20Instance>;
}

export interface ERC20TokenContract
  extends Truffle.Contract<ERC20TokenInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC20TokenInstance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface MiniMeTokenContract
  extends Truffle.Contract<MiniMeTokenInstance> {
  "new"(
    _tokenFactory: string | BN,
    _parentToken: string | BN,
    _parentSnapShotBlock: number | BN | string,
    _tokenName: string,
    _decimalUnits: number | BN | string,
    _tokenSymbol: string,
    _transfersEnabled: boolean,
    meta?: Truffle.TransactionDetails
  ): Promise<MiniMeTokenInstance>;
}

export interface MiniMeTokenFactoryContract
  extends Truffle.Contract<MiniMeTokenFactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MiniMeTokenFactoryInstance>;
}

export interface MultiSigWalletContract
  extends Truffle.Contract<MultiSigWalletInstance> {
  "new"(
    _owners: (string | BN)[],
    _required: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<MultiSigWalletInstance>;
}

export interface MultiSigWalletWithDailyLimitContract
  extends Truffle.Contract<MultiSigWalletWithDailyLimitInstance> {
  "new"(
    _owners: (string | BN)[],
    _required: number | BN | string,
    _dailyLimit: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<MultiSigWalletWithDailyLimitInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface OwnedUpgradeabilityProxyContract
  extends Truffle.Contract<OwnedUpgradeabilityProxyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<OwnedUpgradeabilityProxyInstance>;
}

export interface ProxyContract extends Truffle.Contract<ProxyInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ProxyInstance>;
}

export interface TokenControllerContract
  extends Truffle.Contract<TokenControllerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TokenControllerInstance>;
}

export interface UpgradeabilityProxyContract
  extends Truffle.Contract<UpgradeabilityProxyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<UpgradeabilityProxyInstance>;
}

export interface ApproveAndCallFallBackInstance
  extends Truffle.ContractInstance {
  receiveApproval: {
    (
      from: string | BN,
      _amount: number | BN | string,
      _token: string | BN,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      _amount: number | BN | string,
      _token: string | BN,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      _amount: number | BN | string,
      _token: string | BN,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      _amount: number | BN | string,
      _token: string | BN,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ContextInstance extends Truffle.ContractInstance {}

export interface ControlledInstance extends Truffle.ContractInstance {
  controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  changeController: {
    (
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DTXTokenInstance extends Truffle.ContractInstance {
  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  approve: {
    (
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  creationBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transferFrom: {
    (
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  changeController: {
    (
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOfAt(
    _owner: string | BN,
    _blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  version(txDetails?: Truffle.TransactionDetails): Promise<string>;

  createCloneToken: {
    (
      _cloneTokenName: string,
      _cloneDecimalUnits: number | BN | string,
      _cloneTokenSymbol: string,
      _snapshotBlock: number | BN | string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _cloneTokenName: string,
      _cloneDecimalUnits: number | BN | string,
      _cloneTokenSymbol: string,
      _snapshotBlock: number | BN | string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _cloneTokenName: string,
      _cloneDecimalUnits: number | BN | string,
      _cloneTokenSymbol: string,
      _snapshotBlock: number | BN | string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cloneTokenName: string,
      _cloneDecimalUnits: number | BN | string,
      _cloneTokenSymbol: string,
      _snapshotBlock: number | BN | string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    _owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  parentToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  generateTokens: {
    (
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupplyAt(
    _blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transfersEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  parentSnapShotBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  approveAndCall: {
    (
      _spender: string | BN,
      _amount: number | BN | string,
      _extraData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BN,
      _amount: number | BN | string,
      _extraData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BN,
      _amount: number | BN | string,
      _extraData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BN,
      _amount: number | BN | string,
      _extraData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  destroyTokens: {
    (
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    _owner: string | BN,
    _spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  claimTokens: {
    (_token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tokenFactory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  enableTransfers: {
    (
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  controller(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface DXCInstance extends Truffle.ContractInstance {
  balances(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  dtxToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initializeOwner: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  userToDeals(
    arg0: string | BN,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [string, BN, string, BN, string, BN, string, string, BN, BN, BN, BN]
  >;

  didToDeals(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [string, BN, string, BN, string, BN, string, string, BN, BN, BN, BN]
  >;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  protocolPercentage(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalEscrowed(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  initialize: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeProtocolPercentage: {
    (
      _protocolPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _protocolPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _protocolPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocolPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeDTXToken: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  platformBalance(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN]>;

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN]>;

  convertFiatToToken: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  createDeal: {
    (
      did: string,
      owner: string | BN,
      ownerPercentage: number | BN | string,
      publisher: string | BN,
      publisherPercentage: number | BN | string,
      user: string | BN,
      marketplace: string | BN,
      marketplacePercentage: number | BN | string,
      amount: number | BN | string,
      validFrom: number | BN | string,
      validUntil: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      did: string,
      owner: string | BN,
      ownerPercentage: number | BN | string,
      publisher: string | BN,
      publisherPercentage: number | BN | string,
      user: string | BN,
      marketplace: string | BN,
      marketplacePercentage: number | BN | string,
      amount: number | BN | string,
      validFrom: number | BN | string,
      validUntil: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      did: string,
      owner: string | BN,
      ownerPercentage: number | BN | string,
      publisher: string | BN,
      publisherPercentage: number | BN | string,
      user: string | BN,
      marketplace: string | BN,
      marketplacePercentage: number | BN | string,
      amount: number | BN | string,
      validFrom: number | BN | string,
      validUntil: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      did: string,
      owner: string | BN,
      ownerPercentage: number | BN | string,
      publisher: string | BN,
      publisherPercentage: number | BN | string,
      user: string | BN,
      marketplace: string | BN,
      marketplacePercentage: number | BN | string,
      amount: number | BN | string,
      validFrom: number | BN | string,
      validUntil: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allDeals(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      did: string;
      index: BN;
      owner: string;
      ownerPercentage: BN;
      publisher: string;
      publisherPercentage: BN;
      user: string;
      marketplace: string;
      marketplacePercentage: BN;
      amount: BN;
      validFrom: BN;
      validUntil: BN;
    }[]
  >;

  getDealByIndex(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    did: string;
    index: BN;
    owner: string;
    ownerPercentage: BN;
    publisher: string;
    publisherPercentage: BN;
    user: string;
    marketplace: string;
    marketplacePercentage: BN;
    amount: BN;
    validFrom: BN;
    validUntil: BN;
  }>;

  dealsForDID(
    did: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      did: string;
      index: BN;
      owner: string;
      ownerPercentage: BN;
      publisher: string;
      publisherPercentage: BN;
      user: string;
      marketplace: string;
      marketplacePercentage: BN;
      amount: BN;
      validFrom: BN;
      validUntil: BN;
    }[]
  >;

  dealsForAddress(
    user: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      did: string;
      index: BN;
      owner: string;
      ownerPercentage: BN;
      publisher: string;
      publisherPercentage: BN;
      user: string;
      marketplace: string;
      marketplacePercentage: BN;
      amount: BN;
      validFrom: BN;
      validUntil: BN;
    }[]
  >;

  hasAccessToDID(
    did: string,
    user: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addPermissionToDeal(
    blackList: (string | BN)[],
    whiteList: (string | BN)[],
    dealIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  payout: {
    (
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface DXCV2Instance extends Truffle.ContractInstance {
  balances(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  dtxToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initializeOwner: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  userToDeals(
    arg0: string | BN,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BN, string, BN, string, string, BN, BN, BN, BN]>;

  didToDeals(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BN, string, BN, string, string, BN, BN, BN, BN]>;

  dealsList(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BN, string, BN, string, string, BN, BN, BN, BN]>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  protocolPercentage(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalEscrowed(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  initialize: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeProtocolPercentage: {
    (
      _protocolPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _protocolPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _protocolPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _protocolPercentage: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeDTXToken: {
    (token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  platformBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  newFeature(txDetails?: Truffle.TransactionDetails): Promise<string>;

  balanceOf(
    owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN]>;

  convertFiatToToken: {
    (
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  platformDeposit: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  platformTokenWithdraw: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allDeals(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      did: string;
      owner: string;
      ownerPercentage: BN;
      publisher: string;
      publisherPercentage: BN;
      user: string;
      marketplace: string;
      marketplacePercentage: BN;
      amount: BN;
      validFrom: BN;
      validUntil: BN;
    }[]
  >;

  deal(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    did: string;
    owner: string;
    ownerPercentage: BN;
    publisher: string;
    publisherPercentage: BN;
    user: string;
    marketplace: string;
    marketplacePercentage: BN;
    amount: BN;
    validFrom: BN;
    validUntil: BN;
  }>;

  dealsForDID(
    did: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      did: string;
      owner: string;
      ownerPercentage: BN;
      publisher: string;
      publisherPercentage: BN;
      user: string;
      marketplace: string;
      marketplacePercentage: BN;
      amount: BN;
      validFrom: BN;
      validUntil: BN;
    }[]
  >;

  dealsForAddress(
    user: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      did: string;
      owner: string;
      ownerPercentage: BN;
      publisher: string;
      publisherPercentage: BN;
      user: string;
      marketplace: string;
      marketplacePercentage: BN;
      amount: BN;
      validFrom: BN;
      validUntil: BN;
    }[]
  >;

  hasAccessToDiD(
    did: string,
    user: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  createDeal: {
    (
      did: string,
      owner: string | BN,
      ownerPercentage: number | BN | string,
      publisher: string | BN,
      publisherPercentage: number | BN | string,
      user: string | BN,
      marketplace: string | BN,
      marketplacePercentage: number | BN | string,
      amount: number | BN | string,
      validFrom: number | BN | string,
      validUntil: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      did: string,
      owner: string | BN,
      ownerPercentage: number | BN | string,
      publisher: string | BN,
      publisherPercentage: number | BN | string,
      user: string | BN,
      marketplace: string | BN,
      marketplacePercentage: number | BN | string,
      amount: number | BN | string,
      validFrom: number | BN | string,
      validUntil: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      did: string,
      owner: string | BN,
      ownerPercentage: number | BN | string,
      publisher: string | BN,
      publisherPercentage: number | BN | string,
      user: string | BN,
      marketplace: string | BN,
      marketplacePercentage: number | BN | string,
      amount: number | BN | string,
      validFrom: number | BN | string,
      validUntil: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      did: string,
      owner: string | BN,
      ownerPercentage: number | BN | string,
      publisher: string | BN,
      publisherPercentage: number | BN | string,
      user: string | BN,
      marketplace: string | BN,
      marketplacePercentage: number | BN | string,
      amount: number | BN | string,
      validFrom: number | BN | string,
      validUntil: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  payout: {
    (
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      dealIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ERC20TokenInstance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    _owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      _to: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      _from: string | BN,
      _to: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BN,
      _to: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BN,
      _to: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BN,
      _to: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approve: {
    (
      _spender: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BN,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    _owner: string | BN,
    _spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface IERC20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  lastCompletedMigration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  setCompleted: {
    (
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgrade: {
    (newAddress: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MiniMeTokenInstance extends Truffle.ContractInstance {
  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  creationBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  changeController: {
    (
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newController: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  version(txDetails?: Truffle.TransactionDetails): Promise<string>;

  parentToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transfersEnabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  parentSnapShotBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  tokenFactory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transfer: {
    (
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    _owner: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    _owner: string | BN,
    _spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approveAndCall: {
    (
      _spender: string | BN,
      _amount: number | BN | string,
      _extraData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _spender: string | BN,
      _amount: number | BN | string,
      _extraData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _spender: string | BN,
      _amount: number | BN | string,
      _extraData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _spender: string | BN,
      _amount: number | BN | string,
      _extraData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOfAt(
    _owner: string | BN,
    _blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalSupplyAt(
    _blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  createCloneToken: {
    (
      _cloneTokenName: string,
      _cloneDecimalUnits: number | BN | string,
      _cloneTokenSymbol: string,
      _snapshotBlock: number | BN | string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _cloneTokenName: string,
      _cloneDecimalUnits: number | BN | string,
      _cloneTokenSymbol: string,
      _snapshotBlock: number | BN | string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _cloneTokenName: string,
      _cloneDecimalUnits: number | BN | string,
      _cloneTokenSymbol: string,
      _snapshotBlock: number | BN | string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cloneTokenName: string,
      _cloneDecimalUnits: number | BN | string,
      _cloneTokenSymbol: string,
      _snapshotBlock: number | BN | string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  generateTokens: {
    (
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  destroyTokens: {
    (
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  enableTransfers: {
    (
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimTokens: {
    (_token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MiniMeTokenFactoryInstance extends Truffle.ContractInstance {
  createCloneToken: {
    (
      _parentToken: string | BN,
      _snapshotBlock: number | BN | string,
      _tokenName: string,
      _decimalUnits: number | BN | string,
      _tokenSymbol: string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _parentToken: string | BN,
      _snapshotBlock: number | BN | string,
      _tokenName: string,
      _decimalUnits: number | BN | string,
      _tokenSymbol: string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _parentToken: string | BN,
      _snapshotBlock: number | BN | string,
      _tokenName: string,
      _decimalUnits: number | BN | string,
      _tokenSymbol: string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _parentToken: string | BN,
      _snapshotBlock: number | BN | string,
      _tokenName: string,
      _decimalUnits: number | BN | string,
      _tokenSymbol: string,
      _transfersEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MultiSigWalletInstance extends Truffle.ContractInstance {
  owners(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isOwner(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  confirmations(
    arg0: number | BN | string,
    arg1: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  transactions(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BN, string, boolean]>;

  transactionCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MAX_OWNER_COUNT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  required(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  addOwner: {
    (owner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeOwner: {
    (owner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  replaceOwner: {
    (
      owner: string | BN,
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BN,
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BN,
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeRequirement: {
    (
      _required: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _required: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _required: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _required: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitTransaction: {
    (
      destination: string | BN,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      destination: string | BN,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      destination: string | BN,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BN,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmTransaction: {
    (
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revokeConfirmation: {
    (
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeTransaction: {
    (
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isConfirmed(
    transactionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getConfirmationCount(
    transactionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTransactionCount(
    pending: boolean,
    executed: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getOwners(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getConfirmations(
    transactionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getTransactionIds(
    from: number | BN | string,
    to: number | BN | string,
    pending: boolean,
    executed: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;
}

export interface MultiSigWalletWithDailyLimitInstance
  extends Truffle.ContractInstance {
  owners(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  removeOwner: {
    (owner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revokeConfirmation: {
    (
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOwner(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  confirmations(
    arg0: number | BN | string,
    arg1: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getTransactionCount(
    pending: boolean,
    executed: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  dailyLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  lastDay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  addOwner: {
    (owner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isConfirmed(
    transactionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getConfirmationCount(
    transactionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transactions(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BN, string, boolean]>;

  getOwners(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getTransactionIds(
    from: number | BN | string,
    to: number | BN | string,
    pending: boolean,
    executed: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  getConfirmations(
    transactionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  transactionCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  changeRequirement: {
    (
      _required: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _required: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _required: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _required: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmTransaction: {
    (
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitTransaction: {
    (
      destination: string | BN,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      destination: string | BN,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      destination: string | BN,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination: string | BN,
      value: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  MAX_OWNER_COUNT(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  required(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  replaceOwner: {
    (
      owner: string | BN,
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BN,
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BN,
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  spentToday(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  changeDailyLimit: {
    (
      _dailyLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _dailyLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _dailyLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _dailyLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeTransaction: {
    (
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calcMaxWithdraw(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface OwnableInstance extends Truffle.ContractInstance {
  initializeOwner: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface OwnedUpgradeabilityProxyInstance
  extends Truffle.ContractInstance {
  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  proxyOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferProxyOwnership: {
    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeTo: {
    (
      implementation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeToAndCall: {
    (
      implementation: string | BN,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      implementation: string | BN,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      implementation: string | BN,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      implementation: string | BN,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ProxyInstance extends Truffle.ContractInstance {
  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface TokenControllerInstance extends Truffle.ContractInstance {
  proxyPayment: {
    (_owner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  onTransfer: {
    (
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _from: string | BN,
      _to: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  onApprove: {
    (
      _owner: string | BN,
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _owner: string | BN,
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _owner: string | BN,
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string | BN,
      _spender: string | BN,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface UpgradeabilityProxyInstance extends Truffle.ContractInstance {
  implementation(txDetails?: Truffle.TransactionDetails): Promise<string>;
}
