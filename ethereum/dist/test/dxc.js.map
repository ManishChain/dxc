{"version":3,"file":"dxc.js","sourceRoot":"","sources":["../../test/dxc.ts"],"names":[],"mappings":"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","sourcesContent":["import BN from 'bn.js';\n\nimport {\n  DTXTokenContract,\n  DTXTokenInstance,\n  DXCContract,\n  DXCInstance,\n  MiniMeTokenFactoryContract,\n  MiniMeTokenFactoryInstance,\n  OwnedUpgradeabilityProxyContract,\n  OwnedUpgradeabilityProxyInstance,\n} from '../types/truffle-contracts';\n\nimport {encodeCall} from './utils/encodeCall';\nimport {getLatestQuote} from './utils/getLatestQuote';\n\nconst TF: MiniMeTokenFactoryContract = artifacts.require('MiniMeTokenFactory');\nconst DTX: DTXTokenContract = artifacts.require('DTXToken');\nconst DXC: DXCContract = artifacts.require('DXC');\nconst OUP: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\n\ncontract('DXC', async accounts => {\n  describe('DXC functionalities', async () => {\n    let tfInstance: MiniMeTokenFactoryInstance;\n    let dtxInstance: DTXTokenInstance;\n    let dxcInstance: DXCInstance;\n    let oUPinstance: OwnedUpgradeabilityProxyInstance;\n    let proxiedDxc: DXCInstance;\n    let latestQuote: number;\n\n    function amountOfDTXFor(amountInUSD: number) {\n      return new BN(amountInUSD / latestQuote);\n    }\n\n    before(async () => {\n      latestQuote = await getLatestQuote();\n    });\n\n    beforeEach(async () => {\n      tfInstance = await TF.new();\n      dtxInstance = await DTX.new(tfInstance.address);\n\n      dxcInstance = await DXC.new();\n      oUPinstance = await OUP.new();\n\n      // Encode the calling of the function initialize with the argument dtxInstance.address to bytes\n      const data = encodeCall('initialize', ['address'], [dtxInstance.address]);\n\n      // point proxy contract to dxc contract and call the initialize function which is analogous to a constructor\n      assert.isOk(\n        await oUPinstance.upgradeToAndCall(dxcInstance.address, data, {\n          from: accounts[0],\n        })\n      );\n\n      // Intitialize the proxied dxc instance\n      proxiedDxc = await DXC.at(oUPinstance.address);\n\n      await dtxInstance.generateTokens(\n        proxiedDxc.address,\n        web3.utils.toWei('1000000')\n      );\n\n      await dtxInstance.generateTokens(\n        accounts[0],\n        web3.utils.toWei('1000000')\n      );\n      await dtxInstance.generateTokens(\n        accounts[1],\n        web3.utils.toWei('1000000')\n      );\n    });\n\n    it('Should have a platform balance', async () => {\n      expect(await (await proxiedDxc.platformBalance()).toString()).to.be.equal(\n        web3.utils.toWei('1000000')\n      );\n    });\n\n    it('Can read the balance of someone internally', async () => {\n      const balanceResult = await proxiedDxc.balanceOf(accounts[1]);\n      expect(balanceResult[0].toString()).to.be.equal('0');\n    });\n\n    it('Can convert from fiat money', async () => {\n      let balanceResult = await proxiedDxc.balanceOf(accounts[1]);\n      expect(balanceResult[0].toString()).to.be.equal('0');\n      await proxiedDxc.convertFiatToToken(\n        accounts[1],\n        web3.utils.toWei(amountOfDTXFor(1))\n      );\n      balanceResult = await proxiedDxc.balanceOf(accounts[1]);\n      expect(balanceResult[0].toString()).to.be.equal(\n        web3.utils.toWei(amountOfDTXFor(1))\n      );\n    });\n\n    it('Should create a deal successfully', async () => {\n      // All percentages here need to add up to a 100: 15 + 70 + 10 = 95 + protocol percentage 5 = 100\n      await proxiedDxc.createDeal(\n        'did:databroker:deal2:weatherdata',\n        accounts[1],\n        15,\n        accounts[2],\n        70,\n        accounts[3],\n        accounts[4],\n        10,\n        5,\n        0,\n        0\n      );\n    });\n  });\n});\n"]}