{"version":3,"file":"dxc.js","sourceRoot":"","sources":["../../test/dxc.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DTXTokenContract,\n  DTXTokenInstance,\n  DXCContract,\n  DXCInstance,\n  MiniMeTokenFactoryContract,\n  MiniMeTokenFactoryInstance,\n  OwnedUpgradeabilityProxyContract,\n  OwnedUpgradeabilityProxyInstance,\n} from '../types/truffle-contracts';\n\nimport {encodeCall} from './utils/encodeCall';\n\nconst TF: MiniMeTokenFactoryContract = artifacts.require('MiniMeTokenFactory');\nconst DTX: DTXTokenContract = artifacts.require('DTXToken');\nconst DXC: DXCContract = artifacts.require('DXC');\nconst OUP: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\n\ncontract('DXC functionailities', async accounts => {\n  it('Should depoy succesfully using proxy pattern', async () => {\n    const tfInstance: MiniMeTokenFactoryInstance = await TF.new();\n    const dtxInstance: DTXTokenInstance = await DTX.new(tfInstance.address);\n    const dxcInstance: DXCInstance = await DXC.new();\n    const oUPinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n\n    // Encode the calling of the function initialize with the argument dtxInstance.address to bytes\n    const data = encodeCall('initialize', ['address'], [dtxInstance.address]);\n\n    // point proxy contract to dxc contract and call the initialize function which is analogous to a constructor\n    assert.isOk(\n      await oUPinstance.upgradeToAndCall(dxcInstance.address, data, {\n        from: accounts[0],\n      })\n    );\n\n    // Intitialize the proxied dxc instance\n    const proxiedDxc = await DXC.at(oUPinstance.address);\n    // check if the intial state is correct\n    const val2 = await proxiedDxc.protocolPercentage();\n    assert.equal(val2.toNumber(), 5);\n  });\n\n  it('Should create a deal successfully', async () => {\n    const tfInstance: MiniMeTokenFactoryInstance = await TF.new();\n    const dtxInstance: DTXTokenInstance = await DTX.new(tfInstance.address);\n\n    const dxcInstance: DXCInstance = await DXC.new();\n    const oUPinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n\n    // Encode the calling of the function initialize with the argument dtxInstance.address to bytes\n    const data = encodeCall('initialize', ['address'], [dtxInstance.address]);\n\n    // point proxy contract to dxc contract and call the initialize function which is analogous to a constructor\n    assert.isOk(\n      await oUPinstance.upgradeToAndCall(dxcInstance.address, data, {\n        from: accounts[0],\n      })\n    );\n\n    // Intitialize the proxied dxc instance\n    const proxiedDxc = await DXC.at(oUPinstance.address);\n\n    const platformBalance = await proxiedDxc.platformBalance();\n    console.log(platformBalance.toNumber());\n\n    // All percentages here need to add up to a 100: 15 + 70 + 10 = 95 + protocol percentage 5 = 100\n    await proxiedDxc.createDeal(\n      'did:databroker:deal2:weatherdata',\n      accounts[1],\n      15,\n      accounts[2],\n      70,\n      accounts[3],\n      accounts[4],\n      10,\n      5,\n      0,\n      0\n    );\n  });\n\n  it('Blacklisting should work', async () => {\n    const tfInstance: MiniMeTokenFactoryInstance = await TF.new();\n    const dtxInstance: DTXTokenInstance = await DTX.new(tfInstance.address);\n    const dxcInstance: DXCInstance = await DXC.new();\n    const oUPinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n\n    // Encode the calling of the function initialize with the argument dtxInstance.address to bytes\n    const data = encodeCall('initialize', ['address'], [dtxInstance.address]);\n\n    // point proxy contract to dxc contract and call the initialize function which is analogous to a constructor\n    assert.isOk(\n      await oUPinstance.upgradeToAndCall(dxcInstance.address, data, {\n        from: accounts[0],\n      })\n    );\n\n    // Intitialize the proxied dxc instance\n    const proxiedDxc = await DXC.at(oUPinstance.address);\n\n    // Owner cannot be blacklisted\n    const blackListErr: string = await proxiedDxc\n      .addToBlackList(accounts[0])\n      .catch(err => err);\n\n    assert.equal(\n      'Error: VM Exception while processing transaction: revert Owner cannot be blacklisted',\n      String(blackListErr)\n    );\n\n    // Add other user to blacklist\n    assert.isOk(await proxiedDxc.addToBlackList(accounts[1]));\n\n    const cannotWithdrawErr = await proxiedDxc.withdraw({from: accounts[1]});\n    console.log(cannotWithdrawErr);\n  });\n});\n"]}