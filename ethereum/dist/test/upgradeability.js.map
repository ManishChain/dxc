{"version":3,"file":"upgradeability.js","sourceRoot":"","sources":["../../test/upgradeability.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DTXTokenContract,\n  DTXTokenInstance,\n  DXCContract,\n  DXCInstance,\n  DXCV2Contract,\n  DXCV2Instance,\n  MiniMeTokenFactoryContract,\n  MiniMeTokenFactoryInstance,\n  OwnedUpgradeabilityProxyContract,\n  OwnedUpgradeabilityProxyInstance,\n} from '../types/truffle-contracts';\n\nimport {encodeCall} from './utils/encodeCall';\n\nconst TF: MiniMeTokenFactoryContract = artifacts.require('MiniMeTokenFactory');\nconst DTX: DTXTokenContract = artifacts.require('DTXToken');\nconst DXC: DXCContract = artifacts.require('DXC');\nconst DXCV2: DXCV2Contract = artifacts.require('DXCV2');\nconst OUP: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\n\ncontract('Upgradeability of DXC', async accounts => {\n  it('Test proxied initializer', async () => {\n    const tfInstance: MiniMeTokenFactoryInstance = await TF.new();\n    const dtxInstance: DTXTokenInstance = await DTX.new(tfInstance.address);\n    const dxcInstance: DXCInstance = await DXC.new();\n    const oUPinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n\n    // Encode the calling of the function initialize with the argument dtxInstance.address to bytes\n    const data = encodeCall('initialize', ['address'], [dtxInstance.address]);\n\n    // point proxy contract to dxc contract and call the initialize function which is analogous to a constructor\n    assert.isOk(\n      await oUPinstance.upgradeToAndCall(dxcInstance.address, data, {\n        from: accounts[0],\n      })\n    );\n\n    // Intitialize the proxied dxc instance\n    const proxiedDxc = await DXC.at(oUPinstance.address);\n    // check if the intial state is correct\n    const val2 = await proxiedDxc.protocolPercentage();\n    assert.equal(val2.toNumber(), 5);\n\n    // check if changing the initial state works\n    await proxiedDxc.changeProtocolPercentage(10);\n    const val3 = await proxiedDxc.protocolPercentage();\n    assert.equal(val3.toNumber(), 10);\n  });\n\n  it('Test upgradeabilty feature', async () => {\n    const tfInstance: MiniMeTokenFactoryInstance = await TF.new();\n    const dtxInstance: DTXTokenInstance = await DTX.new(tfInstance.address);\n    const dxcInstance: DXCInstance = await DXC.new();\n    const oUPinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n\n    const data = encodeCall('initialize', ['address'], [dtxInstance.address]);\n\n    assert.isOk(\n      await oUPinstance.upgradeToAndCall(dxcInstance.address, data, {\n        from: accounts[0],\n      })\n    );\n\n    const proxiedDxc = await DXC.at(oUPinstance.address);\n    const val2 = await proxiedDxc.protocolPercentage();\n    assert.equal(val2.toNumber(), 5);\n\n    await proxiedDxc.changeProtocolPercentage(10);\n    const val3 = await proxiedDxc.protocolPercentage();\n    assert.equal(val3.toNumber(), 10);\n\n    // deploy new version of DXC with the newFeature method\n    const newDxcInstance: DXCV2Instance = await DXCV2.new();\n    assert.isOk(await oUPinstance.upgradeTo(newDxcInstance.address));\n\n    // Check if state of previous dxcInstance is still maintained\n    const proxiedUpgradedDxc = await DXCV2.at(oUPinstance.address);\n    const val4 = await proxiedUpgradedDxc.protocolPercentage();\n    assert.equal(val4.toNumber(), 10);\n\n    // Check if newFeature method works\n    const message = await proxiedUpgradedDxc.newFeature();\n    assert.equal(message, 'Whoooaaaaa it works');\n  });\n});\n"]}