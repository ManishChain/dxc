{"version":3,"file":"pausable.js","sourceRoot":"","sources":["../../test/pausable.ts"],"names":[],"mappings":";;AAWA,mDAA8C;AAE9C,MAAM,EAAE,GAA+B,SAAS,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC/E,MAAM,GAAG,GAAqB,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAC5D,MAAM,GAAG,GAAgB,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAClD,MAAM,GAAG,GAAqC,SAAS,CAAC,OAAO,CAC7D,0BAA0B,CAC3B,CAAC;AAEF,QAAQ,CAAC,mBAAmB,EAAE,QAAQ,CAAC,EAAE;IACvC,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACrD,MAAM,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,UAAU,GAA+B,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC;YAC9D,MAAM,WAAW,GAAqB,MAAM,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACxE,MAAM,WAAW,GAAgB,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC;YACjD,MAAM,WAAW,GAAqC,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC;YAEtE,+FAA+F;YAC/F,MAAM,IAAI,GAAG,uBAAU,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YAE1E,4GAA4G;YAC5G,MAAM,CAAC,IAAI,CACT,MAAM,WAAW,CAAC,gBAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE;gBAC5D,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;aAClB,CAAC,CACH,CAAC;YAEF,uCAAuC;YACvC,MAAM,UAAU,GAAG,MAAM,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAErD,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,kBAAkB,EAAE,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  DTXTokenContract,\n  DTXTokenInstance,\n  DXCContract,\n  DXCInstance,\n  MiniMeTokenFactoryContract,\n  MiniMeTokenFactoryInstance,\n  OwnedUpgradeabilityProxyContract,\n  OwnedUpgradeabilityProxyInstance,\n} from '../types/truffle-contracts';\n\nimport {encodeCall} from './utils/encodeCall';\n\nconst TF: MiniMeTokenFactoryContract = artifacts.require('MiniMeTokenFactory');\nconst DTX: DTXTokenContract = artifacts.require('DTXToken');\nconst DXC: DXCContract = artifacts.require('DXC');\nconst OUP: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\n\ncontract('Pausable contract', accounts => {\n  describe('Test pausable functionalities for dxc', () => {\n    before('Init env', async () => {\n      const tfInstance: MiniMeTokenFactoryInstance = await TF.new();\n      const dtxInstance: DTXTokenInstance = await DTX.new(tfInstance.address);\n      const dxcInstance: DXCInstance = await DXC.new();\n      const oUPinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n\n      // Encode the calling of the function initialize with the argument dtxInstance.address to bytes\n      const data = encodeCall('initialize', ['address'], [dtxInstance.address]);\n\n      // point proxy contract to dxc contract and call the initialize function which is analogous to a constructor\n      assert.isOk(\n        await oUPinstance.upgradeToAndCall(dxcInstance.address, data, {\n          from: accounts[0],\n        })\n      );\n\n      // Intitialize the proxied dxc instance\n      const proxiedDxc = await DXC.at(oUPinstance.address);\n\n      it('When not paused everything works as expected', async () => {\n        assert.isOk(await proxiedDxc.protocolPercentage());\n      });\n    });\n  });\n});\n"]}