{"version":3,"file":"3_deploy_token.js","sourceRoot":"","sources":["../../migrations/3_deploy_token.ts"],"names":[],"mappings":";;AAKA,MAAM,YAAY,GAAyB,SAAS,CAAC,OAAO,CAC1D,oBAAoB,CACrB,CAAC;AACF,MAAM,wBAAwB,GAAqC,SAAS,CAAC,OAAO,CAClF,gCAAgC,CACjC,CAAC;AAEF,KAAK,UAAU,gBAAgB,CAC7B,QAA0B,EAC1B,OAAe,EACf,QAAkB;IAElB,qBAAqB;IACrB,MAAM,yBAAyB,GAAG,MAAM,wBAAwB,CAAC,QAAQ,EAAE,CAAC;IAE5E,4BAA4B;IAC5B,MAAM,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACpC,MAAM,aAAa,GAAG,MAAM,YAAY,CAAC,QAAQ,EAAE,CAAC;IAEpD,0DAA0D;IAC1D,MAAM,yBAAyB,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAEjE,2EAA2E;IAC3E,MAAM,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,CAAC,OAAO,GAAG,CAAC,QAAa,EAAE,OAAe,EAAE,QAAkB,EAAE,EAAE;IACtE,QAAQ;SACL,IAAI,CAAC,GAAG,EAAE;QACT,OAAO,gBAAgB,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QACtB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["// Generated with typechain: typechain --target=truffle \"./build/**/*.json\"\nimport {\n  OwnedUpgradeabilityProxyContract,\n  TokenUpgradeContract,\n} from '../types/truffle-contracts';\nconst TokenUpgrade: TokenUpgradeContract = artifacts.require(\n  './TokenUpgrade.sol'\n);\nconst OwnedUpgradeabilityProxy: OwnedUpgradeabilityProxyContract = artifacts.require(\n  './OwnedUpgradeabilityProxy.sol'\n);\n\nasync function performMigration (\n  deployer: Truffle.Deployer,\n  network: string,\n  accounts: string[]\n) {\n  // Is proxy deployed?\n  const dOwnedUpgradeabilityProxy = await OwnedUpgradeabilityProxy.deployed();\n\n  // deploy ogic contract here\n  await deployer.deploy(TokenUpgrade);\n  const dTokenUpgrade = await TokenUpgrade.deployed();\n\n  // upgrade or initialize proxy with logic contract address\n  await dOwnedUpgradeabilityProxy.upgradeTo(dTokenUpgrade.address);\n\n  // re run constructor or init logic since proxy strorage is oblivious to it\n  await dTokenUpgrade.initialize(accounts[0]);\n}\n\nmodule.exports = (deployer: any, network: string, accounts: string[]) => {\n  deployer\n    .then(() => {\n      return performMigration(deployer, network, accounts);\n    })\n    .catch((error: Error) => {\n      console.log(error);\n      process.exit(1);\n    });\n};\n"]}