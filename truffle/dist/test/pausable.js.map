{"version":3,"file":"pausable.js","sourceRoot":"","sources":["../../test/pausable.ts"],"names":[],"mappings":";;AAWA,mDAA8C;AAE9C,MAAM,EAAE,GAA+B,SAAS,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC/E,MAAM,GAAG,GAAqB,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAC5D,MAAM,GAAG,GAAgB,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAClD,MAAM,GAAG,GAAqC,SAAS,CAAC,OAAO,CAC7D,0BAA0B,CAC3B,CAAC;AAEF,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE;IAC9B,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,IAAI,UAAuB,CAAC;QAC5B,MAAM,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,UAAU,GAA+B,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC;YAC9D,MAAM,WAAW,GAAqB,MAAM,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACxE,MAAM,WAAW,GAAgB,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC;YACjD,MAAM,WAAW,GAAqC,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC;YAEtE,+FAA+F;YAC/F,MAAM,IAAI,GAAG,uBAAU,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YAE1E,4GAA4G;YAC5G,MAAM,CAAC,IAAI,CACT,MAAM,WAAW,CAAC,gBAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE;gBAC5D,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;aAClB,CAAC,CACH,CAAC;YAEF,uCAAuC;YACvC,UAAU,GAAG,MAAM,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,IAAI;gBACF,MAAM,UAAU,CAAC,SAAS,EAAE,CAAC;aAC9B;YAAC,OAAO,KAAK,EAAE;gBACd,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC;aACnD;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;YAClC,MAAM,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,MAAM,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;YACzC,IAAI;gBACF,MAAM,UAAU,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;aAC9C;YAAC,OAAO,KAAK,EAAE;gBACd,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;aACrC;YACD,MAAM,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC;YACxC,MAAM,CAAC,IAAI,CAAC,MAAM,UAAU,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,KAAK,CACV,MAAM,CAAC,MAAM,UAAU,CAAC,kBAAkB,EAAE,CAAC,CAAC,QAAQ,EAAE,EACxD,IAAI,CACL,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;YACpC,IAAI;gBACF,MAAM,UAAU,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;aAC7C;YAAC,OAAO,KAAK,EAAE;gBACd,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,yBAAyB,CAAC,CAAC;aACtD;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  DTXTokenContract,\n  DTXTokenInstance,\n  DXCContract,\n  DXCInstance,\n  MiniMeTokenFactoryContract,\n  MiniMeTokenFactoryInstance,\n  OwnedUpgradeabilityProxyContract,\n  OwnedUpgradeabilityProxyInstance,\n} from '../types/truffle-contracts';\n\nimport {encodeCall} from './utils/encodeCall';\n\nconst TF: MiniMeTokenFactoryContract = artifacts.require('MiniMeTokenFactory');\nconst DTX: DTXTokenContract = artifacts.require('DTXToken');\nconst DXC: DXCContract = artifacts.require('DXC');\nconst OUP: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\n\ncontract('Pausable', accounts => {\n  describe('Test pausable functionalities', () => {\n    let proxiedDxc: DXCInstance;\n    before('Init env', async () => {\n      const tfInstance: MiniMeTokenFactoryInstance = await TF.new();\n      const dtxInstance: DTXTokenInstance = await DTX.new(tfInstance.address);\n      const dxcInstance: DXCInstance = await DXC.new();\n      const oUPinstance: OwnedUpgradeabilityProxyInstance = await OUP.new();\n\n      // Encode the calling of the function initialize with the argument dtxInstance.address to bytes\n      const data = encodeCall('initialize', ['address'], [dtxInstance.address]);\n\n      // point proxy contract to dxc contract and call the initialize function which is analogous to a constructor\n      assert.isOk(\n        await oUPinstance.upgradeToAndCall(dxcInstance.address, data, {\n          from: accounts[0],\n        })\n      );\n\n      // Intitialize the proxied dxc instance\n      proxiedDxc = await DXC.at(oUPinstance.address);\n    });\n\n    it('Initial state cannot be changed', async () => {\n      try {\n        await proxiedDxc.initPause();\n      } catch (error) {\n        error.toString().includes('Transaction reverted');\n      }\n    });\n\n    it('When not paused everything works as expected', async () => {\n      assert.isFalse(await proxiedDxc.paused());\n      assert.isOk(await proxiedDxc.changeProtocolPercentage(10));\n    });\n\n    it('Revert when paused', async () => {\n      assert.isOk(await proxiedDxc.pause());\n      assert.isTrue(await proxiedDxc.paused());\n      try {\n        await proxiedDxc.changeProtocolPercentage(5);\n      } catch (error) {\n        error.toString().includes('paused');\n      }\n      assert.isOk(await proxiedDxc.unpause());\n      assert.isOk(await proxiedDxc.changeProtocolPercentage(12));\n      assert.equal(\n        await (await proxiedDxc.protocolPercentage()).toString(),\n        '12'\n      );\n    });\n\n    it('Only owner can pause', async () => {\n      try {\n        await proxiedDxc.pause({from: accounts[1]});\n      } catch (error) {\n        error.toString().includes('caller is not the owner');\n      }\n    });\n  });\n});\n"]}