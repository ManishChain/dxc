{"version":3,"file":"dxc.js","sourceRoot":"","sources":["../../test/dxc.ts"],"names":[],"mappings":"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","sourcesContent":["import BN from 'bn.js';\n\nimport {\n  DTXTokenContract,\n  DTXTokenInstance,\n  DXCDealsContract,\n  DXCDealsInstance,\n  DXCTokensContract,\n  DXCTokensInstance,\n  MiniMeTokenFactoryContract,\n  MiniMeTokenFactoryInstance,\n  OwnedUpgradeabilityProxyContract,\n  OwnedUpgradeabilityProxyInstance,\n} from '../types/truffle-contracts';\n\nimport {getLatestQuote} from './utils/getLatestQuote';\n\nconst TF: MiniMeTokenFactoryContract = artifacts.require('MiniMeTokenFactory');\nconst DTX: DTXTokenContract = artifacts.require('DTXToken');\nconst DXCDeals: DXCDealsContract = artifacts.require('DXCDeals');\nconst DXCTokens: DXCTokensContract = artifacts.require('DXCTokens');\nconst OUP: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\n\ncontract('DXC', async accounts => {\n  describe('DXC functionalities', async () => {\n    let tfInstance: MiniMeTokenFactoryInstance;\n    let dtxInstance: DTXTokenInstance;\n    let dxcDealsInstance: DXCDealsInstance;\n    let dxcTokensInstance: DXCTokensInstance;\n    let oUPTokensinstance: OwnedUpgradeabilityProxyInstance;\n    let oUPDealsinstance: OwnedUpgradeabilityProxyInstance;\n    let proxiedDxcDeals: DXCDealsInstance;\n    let proxiedDxcTokens: DXCTokensInstance;\n    let latestQuote: number;\n\n    function amountOfDTXFor(amountInUSD: number) {\n      return new BN(amountInUSD / latestQuote);\n    }\n\n    before(async () => {\n      latestQuote = await getLatestQuote();\n\n      tfInstance = await TF.new();\n      dtxInstance = await DTX.new(tfInstance.address);\n\n      dxcTokensInstance = await DXCTokens.new();\n      dxcDealsInstance = await DXCDeals.new();\n      oUPTokensinstance = await OUP.new();\n      oUPDealsinstance = await OUP.new();\n\n      assert.isOk(\n        await oUPDealsinstance.upgradeTo(dxcDealsInstance.address, {\n          from: accounts[0],\n        })\n      );\n\n      // point proxy contract to dxc contract and call the initialize function which is analogous to a constructor\n      assert.isOk(\n        await oUPTokensinstance.upgradeTo(dxcTokensInstance.address, {\n          from: accounts[0],\n        })\n      );\n\n      // initialize the proxied dxc instance\n      proxiedDxcTokens = await DXCTokens.at(oUPTokensinstance.address);\n      proxiedDxcDeals = await DXCDeals.at(oUPDealsinstance.address);\n\n      assert.isOk(\n        await proxiedDxcTokens.initialize(\n          dtxInstance.address,\n          proxiedDxcDeals.address\n        )\n      );\n\n      assert.isOk(await proxiedDxcDeals.initialize(proxiedDxcTokens.address));\n\n      await dtxInstance.generateTokens(\n        proxiedDxcTokens.address,\n        web3.utils.toWei('1000000')\n      );\n\n      await dtxInstance.generateTokens(\n        accounts[0],\n        web3.utils.toWei('1000000')\n      );\n\n      await dtxInstance.generateTokens(\n        accounts[1],\n        web3.utils.toWei('1000000')\n      );\n\n      await proxiedDxcTokens.platformDeposit(web3.utils.toWei('1000000'));\n    });\n\n    it('Should have a platform balance', async () => {\n      expect(\n        await (await proxiedDxcTokens.platformBalance()).toString()\n      ).to.be.equal(web3.utils.toWei('1000000'));\n    });\n\n    it('Can read the balance of someone internally', async () => {\n      const balanceResult = await proxiedDxcTokens.balanceOf(accounts[0]);\n      expect(balanceResult[0].toString()).to.be.equal(web3.utils.toWei('0'));\n    });\n\n    it('Can convert from fiat money', async () => {\n      const balanceResult = await proxiedDxcTokens.balanceOf(accounts[1]);\n      expect(balanceResult[0].toString()).to.be.equal(web3.utils.toWei('0'));\n      await proxiedDxcTokens.convertFiatToToken(\n        accounts[1],\n        web3.utils.toWei(amountOfDTXFor(1))\n      );\n      // balanceResult = await proxiedDxcTokens.balanceOf(accounts[1]);\n      // expect(balanceResult[0].toString()).to.be.equal(\n      //   web3.utils.toWei(amountOfDTXFor(1).toString())\n      // );\n    });\n\n    it('Cannot convert from fiat money if the user is not the owner', async () => {\n      let balanceResult = await proxiedDxcTokens.balanceOf(accounts[2]);\n      expect(balanceResult[0].toString()).to.be.equal(new BN(0).toString());\n      try {\n        await proxiedDxcTokens.convertFiatToToken(\n          accounts[2],\n          web3.utils.toWei(amountOfDTXFor(100)),\n          {from: accounts[9]}\n        );\n        assert(false, 'Test succeeded when it should have failed');\n      } catch (error) {\n        assert.isTrue(error.toString().includes('caller is not the owner'));\n      }\n      balanceResult = await proxiedDxcTokens.balanceOf(accounts[2]);\n      expect(balanceResult[0].toString()).to.be.equal(new BN(0).toString());\n    });\n\n    it('Can deposit DTX tokens', async () => {\n      await dtxInstance.generateTokens(\n        accounts[3],\n        web3.utils.toWei('1000000')\n      );\n\n      let balanceResult = await proxiedDxcTokens.balanceOf(accounts[3]);\n      expect(balanceResult[0].toString()).to.be.equal(new BN(0).toString());\n      await dtxInstance.approve(\n        proxiedDxcTokens.address,\n        web3.utils.toWei(amountOfDTXFor(100)),\n        {from: accounts[3]}\n      );\n      const allowanceResult = await dtxInstance.allowance(\n        accounts[3],\n        proxiedDxcTokens.address\n      );\n      expect(allowanceResult.toString()).to.be.equal(\n        web3.utils.toWei(amountOfDTXFor(100).toString())\n      );\n      await proxiedDxcTokens.deposit(web3.utils.toWei(amountOfDTXFor(100)), {\n        from: accounts[3],\n      });\n      balanceResult = await proxiedDxcTokens.balanceOf(accounts[3]);\n      expect(balanceResult[0].toString()).to.be.equal(\n        web3.utils.toWei(amountOfDTXFor(100).toString())\n      );\n    });\n\n    it('Cannot deposit DTX tokens if the allowance is too little', async () => {\n      await dtxInstance.generateTokens(\n        accounts[4],\n        web3.utils.toWei(amountOfDTXFor(100))\n      );\n      let balanceResult = await proxiedDxcTokens.balanceOf(accounts[4]);\n      expect(balanceResult[0].toString()).to.be.equal(new BN(0).toString());\n      await dtxInstance.approve(proxiedDxcTokens.address, new BN('5'), {\n        from: accounts[4],\n      });\n      const allowanceResult = await dtxInstance.allowance(\n        accounts[4],\n        proxiedDxcTokens.address\n      );\n      expect(allowanceResult.toString()).to.be.equal(new BN('5').toString());\n      try {\n        await proxiedDxcTokens.deposit(web3.utils.toWei(amountOfDTXFor(100)), {\n          from: accounts[4],\n        });\n      } catch (error) {\n        assert.isTrue(error.toString().includes('too little allowance'));\n      }\n      balanceResult = await proxiedDxcTokens.balanceOf(accounts[4]);\n      expect(balanceResult[0].toString()).to.be.equal(new BN(0).toString());\n    });\n\n    it('Cannot deposit DTX tokens if their is not enough DTX available', async () => {\n      let balanceResult = await proxiedDxcTokens.balanceOf(accounts[5]);\n      expect(balanceResult[0].toString()).to.be.equal(new BN(0).toString());\n      await dtxInstance.approve(\n        proxiedDxcTokens.address,\n        web3.utils.toWei(amountOfDTXFor(100)),\n        {from: accounts[5]}\n      );\n      const allowanceResult = await dtxInstance.allowance(\n        accounts[5],\n        proxiedDxcTokens.address\n      );\n      expect(allowanceResult.toString()).to.be.equal(\n        web3.utils.toWei(amountOfDTXFor(100).toString())\n      );\n      try {\n        await proxiedDxcTokens.deposit(web3.utils.toWei(amountOfDTXFor(100)), {\n          from: accounts[5],\n        });\n      } catch (error) {\n        assert.isTrue(error.toString().includes('too little DTX'));\n      }\n      balanceResult = await proxiedDxcTokens.balanceOf(accounts[5]);\n      expect(balanceResult[0].toString()).to.be.equal(new BN(0).toString());\n    });\n\n    it('Can withdraw DTX tokens', async () => {\n      const balanceResult1 = await proxiedDxcTokens.balanceOf(accounts[1]);\n      assert.isTrue(balanceResult1[0].toString() !== '0');\n      await proxiedDxcTokens.withdraw({\n        from: accounts[1],\n      });\n      const balanceResult = await proxiedDxcTokens.balanceOf(accounts[1]);\n      expect(balanceResult[0].toString()).to.be.equal(new BN(0).toString());\n    });\n\n    it('Should create a deal successfully', async () => {\n      // All percentages here need to add up to a 100: 15 + 70 + 10 = 95 + protocol percentage 5 = 100\n      await proxiedDxcDeals.createDeal(\n        'did:databroker:deal2:weatherdata',\n        accounts[1],\n        15,\n        accounts[2],\n        70,\n        accounts[3],\n        accounts[4],\n        10,\n        5,\n        0,\n        0\n      );\n    });\n\n    it('Can create a new deal only when the percentages add up to 100', async () => {\n      try {\n        await proxiedDxcDeals.createDeal(\n          'did:dxc:12345',\n          accounts[1],\n          new BN('70'),\n          accounts[2],\n          new BN('10'),\n          accounts[3],\n          accounts[0],\n          new BN('10'),\n          web3.utils.toWei(amountOfDTXFor(50)),\n          Math.floor(Date.now() / 1000),\n          Math.floor(Date.now() / 1000) + 3600 * 24 * 30\n        );\n      } catch (error) {\n        assert.isTrue(\n          error\n            .toString()\n            .includes('All percentages need to add up to exactly 100')\n        );\n      }\n    });\n\n    it('Can list all deals', async () => {\n      await proxiedDxcDeals.createDeal(\n        'did:dxc:12345',\n        accounts[3],\n        new BN('70'),\n        accounts[2],\n        new BN('10'),\n        accounts[1],\n        accounts[0],\n        new BN('15'),\n        web3.utils.toWei(amountOfDTXFor(50)),\n        Math.floor(Date.now() / 1000),\n        Math.floor(Date.now() / 1000) + 3600 * 24 * 30\n      );\n      const deals = await proxiedDxcDeals.allDeals();\n      expect(deals.length).to.be.equal(2);\n    });\n\n    it('Can get the info for a deal', async () => {\n      await proxiedDxcDeals.createDeal(\n        'did:dxc:12345',\n        accounts[3],\n        new BN('70'),\n        accounts[2],\n        new BN('10'),\n        accounts[1],\n        accounts[0],\n        new BN('15'),\n        web3.utils.toWei(amountOfDTXFor(50)),\n        Math.floor(Date.now() / 1000),\n        Math.floor(Date.now() / 1000) + 3600 * 24 * 30\n      );\n      const deal = await proxiedDxcDeals.getDealByIndex(2);\n      expect(deal.did).to.be.equal('did:dxc:12345');\n    });\n\n    it('Can get all the deals for a did', async () => {\n      const deals = await proxiedDxcDeals.dealsForDID('did:dxc:12345');\n      expect(deals).to.be.length(2);\n    });\n\n    it('Can signal access to a did whithout blacklist/whitelist', async () => {\n      let access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[6]);\n      expect(access).to.be.equal(false);\n    });\n\n    it('Can signal access to a deal with blacklist/whitelist 1', async () => {\n      let access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n\n      // Add user to blacklist\n      await proxiedDxcDeals.addPermissionsToDeal([accounts[1]], [], 2);\n\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(false);\n\n      await proxiedDxcDeals.addPermissionsToDeal([], [], 2);\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n    });\n\n    it('Can signal access to a deal with blacklist/whitelist 2', async () => {\n      let access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n\n      // add a whitelist without the user in it\n      await proxiedDxcDeals.addPermissionsToDeal([], [accounts[7]], 2);\n\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(false);\n\n      await proxiedDxcDeals.addPermissionsToDeal([], [], 2);\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n    });\n\n    it('Can signal access to a deal whith blacklist/whitelist 3', async () => {\n      let access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n\n      // add a whitelist with the user in it\n      await proxiedDxcDeals.addPermissionsToDeal([], [accounts[1]], 2);\n\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n\n      await proxiedDxcDeals.addPermissionsToDeal([], [], 2);\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n    });\n\n    it('Can signal access to a deal whith blacklist/whitelist 4', async () => {\n      let access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n\n      // add a whitelist with the user in it and is in blacklist\n      await proxiedDxcDeals.addPermissionsToDeal(\n        [accounts[2]],\n        [accounts[2]],\n        2\n      );\n\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(false);\n\n      await proxiedDxcDeals.addPermissionsToDeal([], [], 2);\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n    });\n\n    it('Can signal access to a deal whith blacklist/whitelist 5', async () => {\n      let access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n\n      // add a whitelist without the user in it and is in blacklist\n      await proxiedDxcDeals.addPermissionsToDeal(\n        [accounts[2]],\n        [accounts[7]],\n        2\n      );\n\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(false);\n\n      await proxiedDxcDeals.addPermissionsToDeal([], [], 2);\n      access = await proxiedDxcDeals.hasAccessToDeal(2, accounts[1]);\n      expect(access).to.be.equal(true);\n    });\n  });\n});\n"]}