{"version":3,"file":"3_deploy_dxc.js","sourceRoot":"","sources":["../../migrations/3_deploy_dxc.ts"],"names":[],"mappings":";;AAQA,MAAM,SAAS,GAAqB,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAClE,MAAM,GAAG,GAAgB,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAClD,MAAM,KAAK,GAAqC,SAAS,CAAC,OAAO,CAC/D,0BAA0B,CAC3B,CAAC;AAEF,MAAM,gBAAgB,GAAG,KAAK,EAC5B,QAA0B,EAC1B,OAAe,EACf,QAAkB,EAClB,EAAE;IACF,MAAM,gBAAgB,GAAqB,MAAM,SAAS,CAAC,QAAQ,EAAE,CAAC;IAEtE,sGAAsG;IACtG,MAAM,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3B,MAAM,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAE7B,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,QAAQ,EAAE,CAAC;IAClC,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAChD,yCAAyC;IAEzC,oGAAoG;IACpG,2BAA2B;IAC3B,kBAAkB;IAClB,iBAAiB;IACjB,+BAA+B;IAC/B,KAAK;IAEL,gFAAgF;IAChF,0EAA0E;AAC5E,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO,GAAG,CAAC,QAAa,EAAE,OAAe,EAAE,QAAkB,EAAE,EAAE;IACtE,QAAQ;SACL,IAAI,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;SACzD,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;QACpB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["//import {encodeCall} from '../test/utils/encodeCall';\nimport {\n  DTXTokenContract,\n  DTXTokenInstance,\n  DXCContract,\n  OwnedUpgradeabilityProxyContract,\n} from '../types/truffle-contracts';\n\nconst DTXMiniMe: DTXTokenContract = artifacts.require('DTXToken');\nconst DXC: DXCContract = artifacts.require('DXC');\nconst Proxy: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\n\nconst performMigration = async (\n  deployer: Truffle.Deployer,\n  network: string,\n  accounts: string[]\n) => {\n  const dTXTokenInstance: DTXTokenInstance = await DTXMiniMe.deployed();\n\n  // We are going to deploy the DXC using a proxy pattern, allowing us to upgrade the DXC contract later\n  await deployer.deploy(DXC);\n  await deployer.deploy(Proxy);\n\n  const dDxc = await DXC.deployed();\n  await dDxc.initialize(dTXTokenInstance.address);\n  // const dProxy = await Proxy.deployed();\n\n  // // encode the calling of the initializer, which here acts as the constructor for the DXC contract\n  // const data = encodeCall(\n  //   'initialize',\n  //   ['address'],\n  //   [dTXTokenInstance.address]\n  // );\n\n  // // point proxy to DXC contract and call the constructor (aka the initializer)\n  // await dProxy.upgradeToAndCall(dDxc.address, data, {from: accounts[0]});\n};\n\nmodule.exports = (deployer: any, network: string, accounts: string[]) => {\n  deployer\n    .then(() => performMigration(deployer, network, accounts))\n    .catch((err: Error) => {\n      console.log(err);\n      process.exit(1);\n    });\n};\n"]}