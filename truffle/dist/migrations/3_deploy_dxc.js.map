{"version":3,"file":"3_deploy_dxc.js","sourceRoot":"","sources":["../../migrations/3_deploy_dxc.ts"],"names":[],"mappings":";;AAWA,MAAM,SAAS,GAAqB,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAClE,MAAM,SAAS,GAAsB,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AACpE,MAAM,QAAQ,GAAqB,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACjE,MAAM,UAAU,GAAqC,SAAS,CAAC,OAAO,CACpE,0BAA0B,CAC3B,CAAC;AACF,MAAM,WAAW,GAAqC,SAAS,CAAC,OAAO,CACrE,0BAA0B,CAC3B,CAAC;AAEF,MAAM,gBAAgB,GAAG,KAAK,EAC5B,QAA0B,EAC1B,OAAe,EACf,QAAkB,EAClB,EAAE;IACF,MAAM,gBAAgB,GAAqB,MAAM,SAAS,CAAC,QAAQ,EAAE,CAAC;IAEtE,sGAAsG;IACtG,MAAM,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACjC,MAAM,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAChC,MAAM,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAClC,MAAM,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAEnC,MAAM,UAAU,GAAsB,MAAM,SAAS,CAAC,QAAQ,EAAE,CAAC;IACjE,MAAM,SAAS,GAAqB,MAAM,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAE9D,MAAM,YAAY,GAAG,MAAM,WAAW,CAAC,QAAQ,EAAE,CAAC;IAClD,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,QAAQ,EAAE,CAAC;IAEhD,MAAM,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACjD,MAAQ,YAA0C,CAAC,UAAU,CAC3D,gBAAgB,CAAC,OAAO,EACxB,WAAW,CAAC,OAAO,CACpB,CAAC;IAEF,MAAM,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC/C,MAAQ,WAAwC,CAAC,UAAU,CACzD,YAAY,CAAC,OAAO,CACrB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO,GAAG,CAAC,QAAa,EAAE,OAAe,EAAE,QAAkB,EAAE,EAAE;IACtE,QAAQ;SACL,IAAI,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;SACzD,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE;QACpB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["//import {encodeCall} from '../test/utils/encodeCall';\nimport {\n  DTXTokenContract,\n  DTXTokenInstance,\n  DXCDealsContract,\n  DXCDealsInstance,\n  DXCTokensContract,\n  DXCTokensInstance,\n  OwnedUpgradeabilityProxyContract,\n} from '../types/truffle-contracts';\n\nconst DTXMiniMe: DTXTokenContract = artifacts.require('DTXToken');\nconst DXCTokens: DXCTokensContract = artifacts.require('DXCTokens');\nconst DXCDeals: DXCDealsContract = artifacts.require('DXCDeals');\nconst ProxyDeals: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\nconst ProxyTokens: OwnedUpgradeabilityProxyContract = artifacts.require(\n  'OwnedUpgradeabilityProxy'\n);\n\nconst performMigration = async (\n  deployer: Truffle.Deployer,\n  network: string,\n  accounts: string[]\n) => {\n  const dTXTokenInstance: DTXTokenInstance = await DTXMiniMe.deployed();\n\n  // We are going to deploy the DXC using a proxy pattern, allowing us to upgrade the DXC contract later\n  await deployer.deploy(DXCTokens);\n  await deployer.deploy(DXCDeals);\n  await deployer.deploy(ProxyDeals);\n  await deployer.deploy(ProxyTokens);\n\n  const dDxcTokens: DXCTokensInstance = await DXCTokens.deployed();\n  const dDxcDeals: DXCDealsInstance = await DXCDeals.deployed();\n\n  const dProxyTokens = await ProxyTokens.deployed();\n  const dProxyDeals = await ProxyDeals.deployed();\n\n  await dProxyTokens.upgradeTo(dDxcTokens.address);\n  await ((dProxyTokens as any) as DXCTokensInstance).initialize(\n    dTXTokenInstance.address,\n    dProxyDeals.address\n  );\n\n  await dProxyDeals.upgradeTo(dDxcDeals.address);\n  await ((dProxyDeals as any) as DXCDealsInstance).initialize(\n    dProxyTokens.address\n  );\n};\n\nmodule.exports = (deployer: any, network: string, accounts: string[]) => {\n  deployer\n    .then(() => performMigration(deployer, network, accounts))\n    .catch((err: Error) => {\n      console.log(err);\n      process.exit(1);\n    });\n};\n"]}